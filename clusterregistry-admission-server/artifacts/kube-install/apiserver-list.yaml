apiVersion: v1
kind: List
items:

# to create the clusterregistry-admission-server
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    namespace: clusterregistry-admission
    name: server
    labels:
      server: "true"
  spec:
    selector:
      matchLabels:
        server: "true"
    template:
      metadata:
        name: server
        labels:
          server: "true"
      spec:
        serviceAccountName: server
        containers:
        - name: c
          image: onyinyang/clusterregistry-admission-server:latest
          imagePullPolicy: IfNotPresent
          command:
          - "/usr/bin/clusterregistry-admission-server"
          - "--secure-port=8443"
          - "--audit-log-path=-"
          - "--tls-cert-file=/var/serving-cert/tls.crt"
          - "--tls-private-key-file=/var/serving-cert/tls.key"
          - "--v=8"
          ports:
          - containerPort: 8443
          volumeMounts:
          - mountPath: /var/serving-cert
            name: serving-cert
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8443
              scheme: HTTPS
        volumes:
        - name: serving-cert
          secret:
            defaultMode: 420
            secretName: server-serving-cert

# kube lacks the service serving cert signer, so provide a manual secret for it
- apiVersion: v1
  kind: Secret
  metadata:
    namespace: clusterregistry-admission
    name: server-serving-cert
  type: kubernetes.io/tls
  data:
    tls.crt: TLS_SERVING_CERT
    tls.key: TLS_SERVING_KEY

# to be able to assign powers to the process
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    namespace: clusterregistry-admission
    name: server

# to be able to expose TSB inside the cluster
- apiVersion: v1
  kind: Service
  metadata:
    namespace: clusterregistry-admission
    name: server
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: server-serving-cert
  spec:
    selector:
      server: "true"
    ports:
    - port: 443
      targetPort: 8443

# to create the custom resource
- apiVersion: apiextensions.k8s.io/v1beta1
  kind: CustomResourceDefinition
  metadata:
    name: clusters.clusterregistry.k8s.io
  spec:
    group: clusterregistry.k8s.io
    version: v1alpha1
    scope: Cluster
    names:
      plural: clusters
      singular: cluster
      kind: Cluster
  validation:
      openAPIV3Schema:
        properties:
          spec:
            type: object
            kubernetesAPIEndpoints:
              type: object
              properties:
              serverEndpoints:
                type: array
                items:
                  type: object
                  properties:
                    clientCIDR:
                      type: string
                    serverAddress:
                      type: string
              caBundle:
                type: byte
            authInfo:
              type: object
              properties:
              providers:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    type:
                      type: object
                      properties:
                        name:
                          type: string
                    config:
                      type: array
                      items:
                        type: object
                        properties:
                          key:
                            type: string
                          value:
                            type: string

# register as aggregated apiserver
- apiVersion: apiregistration.k8s.io/v1beta1
  kind: APIService
  metadata:
    name: v1beta1.admission.online.openshift.io
  spec:
    caBundle: SERVICE_SERVING_CERT_CA
    group: admission.online.openshift.io
    groupPriorityMinimum: 1000
    versionPriority: 15
    service:
      name: server
      namespace: clusterregistry-admission
    version: v1beta1

# register to intercept namespace creates
- apiVersion: admissionregistration.k8s.io/v1beta1
  kind: ValidatingWebhookConfiguration
  metadata:
    name: clusterregistryadmission.admission.online.openshift.io
  webhooks:
  - name: clusterregistryadmission.admission.online.openshift.io
    clientConfig:
      service:
        namespace: default
        name: kubernetes
        path: /apis/admission.online.openshift.io/v1beta1/clusterregistryadmission
      caBundle: KUBE_CA
    rules:
    - operations:
      - CREATE
      apiGroups:
      - clusterregistry.k8s.io
      apiVersions:
      - "*"
      resources:
      - clusters
    failurePolicy: Fail
